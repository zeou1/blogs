{
  
    
        "post0": {
            "title": "Comparing GraphSAGE to CASC",
            "content": "Introduction . Hamilton et al. developed GraphSAGE to generate low-dimensional embeddings for nodes in large network. Unlike previous transductive method, GraphSAGE excels at generate embeddings for previously unseen nodes and graphs by leveraging node attribute information. . On the other hand, Binkiewicz et al. developed Covariate-assisted Spectral Clustering(CASC) with a similar goal: use node covariates like node locations or neurological region memberships to help generate embeddings and identify latent communities in the graph. . Since both methods utilize additional node information other than node connection to generate latent representations, it will be interesting to compare the two methods and observe their performance on various datasets. . CORA Dataset . The Cora dataset is the MNIST equivalent for graph learning and is often used for first testing purposes. It consists of 2708 scientific publications classified into one of seven classes. The citation network consists of 5429 links. Each publication in the dataset is described by a 0/1-valued word vector indicating the absence/presence of the corresponding word from the dictionary. The dictionary consists of 1433 unique words. . import os import networkx as nx import pandas as pd import graspologic import matplotlib.pyplot as plt import seaborn as sns import numpy as np . Load the CORA Dataset . A is the $2708*2708$ adjacency matrix, X is the $2708*1433$ covariate matrix, and node_subjects is a $2708*1$ vector storing the category for each node. G_SAGE is the combination of A and X used for the Stellar GraphSAGE implementation. . from stellargraph import datasets dataset = datasets.Cora() G_SAGE, node_subjects_SAGE = dataset.load() print(G_SAGE.info()) . StellarGraph: Undirected multigraph Nodes: 2708, Edges: 5429 Node types: paper: [2708] Features: float32 vector, length 1433 Edge types: paper-cites-&gt;paper Edge types: paper-cites-&gt;paper: [5429] Weights: all 1 (default) Features: none . A = graspologic.utils.import_graph(G_SAGE.to_networkx()) A = graspologic.utils.pass_to_ranks(A) X = G_SAGE.node_features() node_subjects_CASC = node_subjects_SAGE.reset_index() node_subjects_CASC = node_subjects_CASC[&#39;subject&#39;].squeeze() . Search in alpha and n_components for CASC . We need to search in the parameter space of these two variables to determine an optimal combination for CASC. . %matplotlib inline from tensorflow.keras import layers, optimizers, losses, metrics, Model, Sequential, utils from graspologic.embed import CovariateAssistedEmbed as CASE from sklearn import preprocessing, model_selection import matplotlib.pyplot as plt from matplotlib import cm from matplotlib.ticker import LinearLocator # Split the dataset into training and testing train_subjects, test_subjects = model_selection.train_test_split( node_subjects_CASC, train_size=0.1, test_size=None, stratify=node_subjects_CASC ) target_encoding = preprocessing.LabelBinarizer() train_targets = target_encoding.fit_transform(train_subjects) test_targets = target_encoding.transform(test_subjects) # Define the search range alpha_min=10e-5 alpha_max=2 alpha_num=20 components_min=10 components_max=25 components_num = components_max - components_min + 1 alpha_range = np.geomspace(alpha_min, alpha_max, alpha_num) components_range = range(components_min, components_max+1) test_loss = np.zeros((alpha_num, components_num)) test_acc = np.zeros((alpha_num, components_num)) for a, i in zip(alpha_range, range(0, alpha_num)): case = CASE(alpha=a, assortative=True, n_components=components_max) latents = case.fit_transform((A, X)) for n, j in zip(components_range, range(0, components_num)): train_data = latents[train_subjects.index.values, 0:n] test_data = latents[test_subjects.index.values, 0:n] model = Sequential( layers.Dense(units=train_targets.shape[1], activation=&quot;softmax&quot;) ) model.compile( optimizer=optimizers.Adam(lr=0.03), loss=losses.categorical_crossentropy, metrics=[&quot;acc&quot;], ) model.fit(train_data, train_targets, epochs=50, verbose=0) test_loss[i, j], test_acc[i, j] = model.evaluate(test_data, test_targets, verbose=0) components_range, alpha_range = np.meshgrid(components_range, alpha_range) fig = plt.figure() ax = plt.axes(projection=&#39;3d&#39;) surf = ax.plot_surface(components_range, alpha_range, test_acc, cmap=cm.coolwarm, linewidth=0, antialiased=False) # Customize the z axis. ax.set_zlim(0, 1) ax.zaxis.set_major_locator(LinearLocator(10)) # A StrMethodFormatter is used automatically ax.zaxis.set_major_formatter(&#39;{x:.02f}&#39;) ax.set_xlabel(&#39;n_components&#39;) ax.set_ylabel(&#39;alpha&#39;) ax.set_zlabel(&#39;accuracy&#39;); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T21:39:03.653114 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ Based on the search, we can safely says that a combination of alpha=2 and n_components=25 will give us a good performance for CASC . K-Fold Validation for GraphSAGE and CASC . from stellargraph.mapper import GraphSAGENodeGenerator from stellargraph.layer import GraphSAGE num_folds = 10 # The first column corresponds to GraphSAGE, the second column corresponds to CASC acc_per_fold = np.zeros((num_folds, 2)) loss_per_fold = np.zeros((num_folds, 2)) # Parameters specific for GraphSAGE batch_size = 50 num_samples = [10, 5] generator = GraphSAGENodeGenerator(G_SAGE, batch_size, num_samples) # Parameters specific for CASC alpha = 2 n_components = 25 # Calculate latent positions for CASC case = CASE(alpha=alpha, assortative=True, n_components=n_components) latents = case.fit_transform((A, X)) skf = model_selection.StratifiedKFold(n_splits=num_folds) fold_no = 1 for train_index, test_index in skf.split(np.zeros(2708), node_subjects_CASC): # GraphSAGE # Separate the dataset into training and testing train_subjects = node_subjects_SAGE.iloc[train_index] test_subjects = node_subjects_SAGE.iloc[test_index] # Convert the labels into one-hot vectors target_encoding = preprocessing.LabelBinarizer() train_targets = target_encoding.fit_transform(train_subjects) test_targets = target_encoding.transform(test_subjects) train_gen = generator.flow(train_subjects.index, train_targets, shuffle=True) graphsage_model = GraphSAGE( layer_sizes=[32, 32], generator=generator, bias=True, dropout=0.5, ) x_inp, x_out = graphsage_model.in_out_tensors() prediction = layers.Dense(units=train_targets.shape[1], activation=&quot;softmax&quot;)(x_out) model = Model(inputs=x_inp, outputs=prediction) model.compile( optimizer=optimizers.Adam(lr=0.005), loss=losses.categorical_crossentropy, metrics=[&quot;acc&quot;], ) model.fit(train_gen, epochs=20, verbose=0, shuffle=False) test_gen = generator.flow(test_subjects.index, test_targets) test_loss, test_acc = model.evaluate(test_gen, verbose=0) print(f&#39;GraphSAGE: Score for fold {fold_no}: {model.metrics_names[0]} of {test_loss}; {model.metrics_names[1]} of {test_acc}&#39;) acc_per_fold[fold_no-1, 0] = test_acc loss_per_fold[fold_no-1, 0] = test_loss # CASC train_data = latents[train_index, :] test_data = latents[test_index, :] model = Sequential( layers.Dense(units=train_targets.shape[1], activation=&quot;softmax&quot;) ) model.compile( optimizer=optimizers.Adam(lr=0.03), loss=losses.categorical_crossentropy, metrics=[&quot;acc&quot;], ) model.fit(train_data, train_targets, epochs=80, verbose=0) test_loss, test_acc = model.evaluate(test_data, test_targets, verbose=0) print(f&#39;CASC: Score for fold {fold_no}: {model.metrics_names[0]} of {test_loss}; {model.metrics_names[1]} of {test_acc}&#39;) acc_per_fold[fold_no-1, 1] = test_acc loss_per_fold[fold_no-1, 1] = test_loss # Increase fold number fold_no = fold_no + 1 print() . GraphSAGE: Score for fold 1: loss of 0.5386274456977844; acc of 0.8523985147476196 CASC: Score for fold 1: loss of 0.8901646137237549; acc of 0.76752769947052 GraphSAGE: Score for fold 2: loss of 0.5524826049804688; acc of 0.8560885787010193 CASC: Score for fold 2: loss of 0.7989338040351868; acc of 0.7343173623085022 GraphSAGE: Score for fold 3: loss of 0.47200965881347656; acc of 0.8819188475608826 CASC: Score for fold 3: loss of 0.729191780090332; acc of 0.7638376355171204 GraphSAGE: Score for fold 4: loss of 0.5235143899917603; acc of 0.8523985147476196 CASC: Score for fold 4: loss of 0.7496111392974854; acc of 0.7306272983551025 GraphSAGE: Score for fold 5: loss of 0.552318811416626; acc of 0.8413284420967102 CASC: Score for fold 5: loss of 0.8455246686935425; acc of 0.7343173623085022 GraphSAGE: Score for fold 6: loss of 0.5929430723190308; acc of 0.8376383781433105 CASC: Score for fold 6: loss of 0.8899222016334534; acc of 0.6937269568443298 GraphSAGE: Score for fold 7: loss of 0.4395116865634918; acc of 0.8671586513519287 CASC: Score for fold 7: loss of 0.7878137826919556; acc of 0.7380073666572571 GraphSAGE: Score for fold 8: loss of 0.5191547274589539; acc of 0.8523985147476196 CASC: Score for fold 8: loss of 0.7854512333869934; acc of 0.7564575672149658 GraphSAGE: Score for fold 9: loss of 0.5661121606826782; acc of 0.8407407402992249 CASC: Score for fold 9: loss of 0.8308444023132324; acc of 0.7370370626449585 GraphSAGE: Score for fold 10: loss of 0.6640772819519043; acc of 0.8333333134651184 CASC: Score for fold 10: loss of 1.0007444620132446; acc of 0.6740740537643433 . ax = plt.gca() for i in range(0, 10): plt.plot([1, 2], [acc_per_fold[i, 0], acc_per_fold[i, 1]], marker=&#39;o&#39;) ax.set_xlabel(&#39;Method&#39;) ax.set_ylabel(&#39;Accuracy&#39;) ax.set_xticks([1, 2]) ax.set_xticklabels([&#39;GraphSage&#39;, &#39;CASC&#39;]); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T21:51:35.175549 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ GraphSAGE Confusion Matrix . train_subjects, test_subjects = model_selection.train_test_split( node_subjects_SAGE, train_size=0.1, test_size=None, stratify=node_subjects_SAGE ) target_encoding = preprocessing.LabelBinarizer() train_targets = target_encoding.fit_transform(train_subjects) test_targets = target_encoding.transform(test_subjects) generator = GraphSAGENodeGenerator(G_SAGE, batch_size, num_samples) train_gen = generator.flow(train_subjects.index, train_targets, shuffle=True) graphsage_model = GraphSAGE( layer_sizes=[32, 32], generator=generator, bias=True, dropout=0.5, ) x_inp, x_out = graphsage_model.in_out_tensors() prediction = layers.Dense(units=train_targets.shape[1], activation=&quot;softmax&quot;)(x_out) model = Model(inputs=x_inp, outputs=prediction) model.compile( optimizer=optimizers.Adam(lr=0.005), loss=losses.categorical_crossentropy, metrics=[&quot;acc&quot;], ) model.fit(train_gen, epochs=20, verbose=0, shuffle=False) all_nodes = node_subjects_SAGE.index all_mapper = generator.flow(all_nodes) all_predictions = model.predict(all_mapper) node_predictions = target_encoding.inverse_transform(all_predictions) . . from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay figure, ax = plt.subplots(figsize=(10, 10)) cm = confusion_matrix(node_subjects_SAGE, node_predictions, labels=[&#39;Case_Based&#39;, &#39;Genetic_Algorithms&#39;, &#39;Neural_Networks&#39;, &#39;Probabilistic_Methods&#39;, &#39;Reinforcement_Learning&#39;, &#39;Rule_Learning&#39;, &#39;Theory&#39;], normalize=&#39;all&#39;) disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[&#39;Case_Based&#39;, &#39;Genetic_Algorithms&#39;, &#39;Neural_Networks&#39;, &#39;Probabilistic_Methods&#39;, &#39;Reinforcement_Learning&#39;, &#39;Rule_Learning&#39;, &#39;Theory&#39;]) disp.plot(ax=ax, xticks_rotation=270); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T21:51:42.222176 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ CASC Confusion Matrix . train_subjects, test_subjects = model_selection.train_test_split( node_subjects_CASC, train_size=0.1, test_size=None, stratify=node_subjects_CASC ) target_encoding = preprocessing.LabelBinarizer() train_targets = target_encoding.fit_transform(train_subjects) test_targets = target_encoding.transform(test_subjects) train_data = latents[train_subjects.index.values, :] test_data = latents[test_subjects.index.values, :] model = Sequential( layers.Dense(units=train_targets.shape[1], activation=&quot;softmax&quot;) ) model.compile( optimizer=optimizers.Adam(lr=0.03), loss=losses.categorical_crossentropy, metrics=[&quot;acc&quot;], ) model.fit(train_data, train_targets, epochs=50, verbose=0) all_predictions = model.predict(latents) node_predictions = target_encoding.inverse_transform(all_predictions) . . figure, ax = plt.subplots(figsize=(10, 10)) cm = confusion_matrix(node_subjects_CASC, node_predictions, labels=[&#39;Case_Based&#39;, &#39;Genetic_Algorithms&#39;, &#39;Neural_Networks&#39;, &#39;Probabilistic_Methods&#39;, &#39;Reinforcement_Learning&#39;, &#39;Rule_Learning&#39;, &#39;Theory&#39;], normalize=&#39;all&#39;) disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[&#39;Case_Based&#39;, &#39;Genetic_Algorithms&#39;, &#39;Neural_Networks&#39;, &#39;Probabilistic_Methods&#39;, &#39;Reinforcement_Learning&#39;, &#39;Rule_Learning&#39;, &#39;Theory&#39;]) disp.plot(ax=ax, xticks_rotation=270); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T21:51:43.672628 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ PubMed Diabetes Dataset . The Pubmed Diabetes dataset consists of 19717 scientific publications from PubMed database pertaining to diabetes classified into one of three classes. The citation network consists of 44338 links. Each publication in the dataset is described by a TF/IDF weighted word vector from a dictionary which consists of 500 unique words. . Similar to the CORA dataset, the PubMed Diabetes dataset is about scientific paper citation. However, there are only 3 categories compared to 7. There are also more nodes. The feature vector is also non-binary. . Load the PubMed Diabetes Dataset . A is the $19717*19717$ adjacency matrix, X is the $19717*500$ covariate matrix, and node_subjects is a $19717*1$ vector storing the category for each node. G_SAGE is the combination of A and X used for the Stellar GraphSAGE implementation. . %reset . import os import networkx as nx import pandas as pd import graspologic import matplotlib.pyplot as plt import seaborn as sns import numpy as np . from stellargraph import datasets dataset = datasets.PubMedDiabetes() G_SAGE, node_subjects_SAGE = dataset.load() print(G_SAGE.info()) . StellarGraph: Undirected multigraph Nodes: 19717, Edges: 44338 Node types: paper: [19717] Features: float32 vector, length 500 Edge types: paper-cites-&gt;paper Edge types: paper-cites-&gt;paper: [44338] Weights: all 1 (default) Features: none . A = graspologic.utils.import_graph(G_SAGE.to_networkx()) A = graspologic.utils.pass_to_ranks(A) X = G_SAGE.node_features() node_subjects_CASC = node_subjects_SAGE.reset_index() node_subjects_CASC = node_subjects_CASC[&#39;label&#39;].squeeze() . def plot_latents(latent_positions, *, title, labels, ax=None): if ax is None: ax = plt.gca() plot = sns.scatterplot(latent_positions[:, 0], latent_positions[:, 1], hue=labels, linewidth=0, s=10, ax=ax, palette=&quot;Set1&quot;) plot.set_title(title, wrap=True); ax.axes.xaxis.set_visible(False) ax.axes.yaxis.set_visible(False) ax.legend(bbox_to_anchor=(1.5, 1), loc=&quot;upper right&quot;, title=&quot;Community&quot;) return plot . from graspologic.embed import CovariateAssistedEmbed as CASE case = CASE(alpha=None, assortative=True, n_components=2) latents = case.fit_transform((A, X)) plot_latents(latents, title=r&quot;CASE embedding&quot;, labels=node_subjects_CASC); . /Users/ze/opt/miniconda3/envs/Stellar/lib/python3.6/site-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T22:07:08.539172 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ print(&quot;The ratio of the leading eigenvector is:&quot;, case.alpha_) . The ratio of the leading eigenvector is: 0.016129894022840232 . Search in alpha and n_components for CASC . We need to search in the parameter space of these two variables to determine an optimal combination for CASC. . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T22:48:30.756426 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ Based on the search, we can safely says that a combination of alpha=2 and n_components=25 will give us a good performance for CASC . K-Fold Validation for GraphSAGE and CASC . GraphSAGE: Score for fold 1: loss of 0.27281248569488525; acc of 0.9031440019607544 CASC: Score for fold 1: loss of 0.4590357542037964; acc of 0.8154157996177673 GraphSAGE: Score for fold 2: loss of 0.2910495102405548; acc of 0.8848884105682373 CASC: Score for fold 2: loss of 0.4615432322025299; acc of 0.8149087429046631 GraphSAGE: Score for fold 3: loss of 0.29778361320495605; acc of 0.8950304388999939 CASC: Score for fold 3: loss of 0.45043161511421204; acc of 0.8154157996177673 GraphSAGE: Score for fold 4: loss of 0.28901612758636475; acc of 0.889452338218689 CASC: Score for fold 4: loss of 0.43810975551605225; acc of 0.8215010166168213 GraphSAGE: Score for fold 5: loss of 0.31633561849594116; acc of 0.8828600645065308 CASC: Score for fold 5: loss of 0.46598654985427856; acc of 0.813894510269165 GraphSAGE: Score for fold 6: loss of 0.2792716324329376; acc of 0.8843813538551331 CASC: Score for fold 6: loss of 0.4625921845436096; acc of 0.8062880039215088 GraphSAGE: Score for fold 7: loss of 0.29113638401031494; acc of 0.9006085395812988 CASC: Score for fold 7: loss of 0.46177738904953003; acc of 0.8123732209205627 GraphSAGE: Score for fold 8: loss of 0.3175070285797119; acc of 0.8843227028846741 CASC: Score for fold 8: loss of 0.4742300510406494; acc of 0.810248613357544 GraphSAGE: Score for fold 9: loss of 0.32140693068504333; acc of 0.8812785148620605 CASC: Score for fold 9: loss of 0.48305195569992065; acc of 0.8087265491485596 GraphSAGE: Score for fold 10: loss of 0.2991116940975189; acc of 0.8868594765663147 CASC: Score for fold 10: loss of 0.45755183696746826; acc of 0.8112633228302002 . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T23:17:59.831652 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ GraphSAGE Confusion Matrix . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T23:18:24.148332 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ CASC Confusion Matrix . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; 2021-05-04T23:18:26.479442 image/svg+xml Matplotlib v3.3.0, https://matplotlib.org/ Conclusion . Based on the results from the two datasets, we can comfortably say that CASC is about 10% less accurate than GraphSAGE. However, we did not perform an extensive search in the alpha and n_components space to find the global maximum pair of parameters. We simply did a logarithmic search around the raiot of the largest eigenvectors. It might be possible that we were not successful in locating the most optimal setting with our grid search algorithm. . It is worth noting that the accuracy of classification based on CASC embedding seems to monotonically increases with both n_components and alpha. It is easy to understand the case of n_components. As n_components increase, the nodes are embedded into higher dimensions, separating the clusters further apart. However, the monotinic increase with alpha seems to imply that the adjacency matrix matters less than the feature matrix in both datasets tested here. . It is also worth noting that while the run times of both methods for CORA are similar, CASC is significantly slower than GraphSAGE for PubMed Diabetes due to the large number of nodes to be embedded. Furthermore, GraphSAGE is an inductive method, but CASC needs to embed the entire graph again when classifying previously unseen nodes. .",
            "url": "https://zeou1.github.io/blogs/fastpages/jupyter/2021/05/06/CASC-GraphSAGE.html",
            "relUrl": "/fastpages/jupyter/2021/05/06/CASC-GraphSAGE.html",
            "date": " • May 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://zeou1.github.io/blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://zeou1.github.io/blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zeou1.github.io/blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zeou1.github.io/blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}